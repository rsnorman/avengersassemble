var TeamBuilder = React.createClass({
  getInitialState: function() {
    return {
      characters: [],
      team: {
        characters: [],
        experience: 0
      }
    };
  },

  showCharacters: function(characters) {
    this.setState({
      characters: characters
    });
  },

  addCharacterToTeam: function(character) {
    if ( this.props.maxSize > this.state.team.characters.length ) {

      if ( this.props.maxExperience > this.state.team.experience + character.experience ) {

        this.state.team.characters.push(character);
        this.state.team.experience += character.experience

        PubSub.publish( 'notification', {
          text: 'Added ' + character.name + ' to team',
          type: 'success'
        } );

        if ( this.props.maxSize === this.state.team.characters.length ) {
          this.state.team.isValid = true
        }

      } else {
        PubSub.publish( 'notification', {
          text: 'Too powerful of a team',
          type: 'error'
        } );
      }

    } else {
      PubSub.publish( 'notification', {
        text: 'Too many team members',
        type: 'error'
      } );
    }

    this.setState(this.state);
  },

  teamAssembled: function(team) {
    PubSub.publish( 'notification', {
      text: 'Team create successfully',
      type: 'success'
    } );
  },

  render: function() {
    return (
      <div>
        <div className="row">
          <div className="large-12 columns">
            <NewTeam team={this.state.team} onAssembleTeamSuccess={this.teamAssembled} allowedExperience={this.props.maxExperience}></NewTeam>
          </div>
        </div>

        <div className="row">
          <div className="large-12 columns">
            <div className="radius panel">
              <CharacterSearch onSearchSuccess={this.showCharacters} />
            </div>
          </div>
        </div>

        <div className="row">
          <div className="row">
            <div className="large-12 columns">
              <Characters onCharacterSelect={this.addCharacterToTeam} characters={this.state.characters} />
            </div>
          </div>
        </div>
      </div>
    );
  }
});

$(document).on('ready page:load', function() {
  var teamBuilderEl;
  teamBuilderEl = document.getElementById('team_builder');

  if ( teamBuilderEl ) {
    React.render(<TeamBuilder maxSize={5} maxExperience={<%= UserTeamCreator::ALLOWED_CUMULATIVE_EXPERIENCE %>} />, teamBuilderEl);
  }
});
